{"componentChunkName":"component---src-templates-blog-post-js","path":"/first-post/","result":{"data":{"site":{"siteMetadata":{"title":"SWE Journey"}},"markdownRemark":{"id":"f8948249-6d1d-5561-b3dc-b6e64b202fcb","excerpt":"Hey there, if you are reading this in a desktop, press ctrl + shift + i and open console and paste the below code. if you are new to programming, you might be‚Ä¶","html":"<p>Hey there, if you are reading this in a desktop, press ctrl + shift + i and open console and paste the below code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span></code></pre></div>\n<p>if you are new to programming, you might be surprised by the output false and is computer arithmetic broke or is this a secret plan by illuminati to control all our computers.</p>\n<p>Don‚Äôt worry, this is by design. we think of numbers as decimal(multiples of 10), similarly all computers process numbers in binary. So, the same way 1/3 can never be represented accurately in decimal. No fraction with divisors other than 2 can be represented exactly in binary.</p>\n<p>In this case, binary64 0.1 is a little greater than 1/10 and 0.2 is a little greater than 1/5, so the difference add up is significant enough for the result to become 0.30000000000000004.</p>\n<hr>\n<h2 id=\"the-solution\" style=\"position:relative;\"><a href=\"#the-solution\" aria-label=\"the solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The solution</h2>\n<p>In financial computing, fixed point is used to overcome this problem. But, this is only because of rounding to given precision(generally 2 points after decimal), Binary can never represent 0.1 or 0.2 or any fraction with denominator other than 2 accurately, the same way decimal cannot represent any fraction with denominator other than 2 and 5 accurately.</p>\n<p>processor designers preffered to implement FPUs(Floating Point Units) because this format offers more range for the same amount of space (16, 32, 64 bits) and figured most(99.9%) of the computations will not be affected by these subtle idiosyncrasies. But most computing will be affected by a lack of range and quick arithmetic operations.</p>\n<p>Play around by changing pricision numbers using below snippetüòÅ‚úåÔ∏è.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Number<span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"0.10000000000000000555\"</span></code></pre></div>","timeToRead":1,"frontmatter":{"title":"0.1+0.2 not equal to 0.3???üòï","date":"August 21, 2021","description":"The limitations of floating point math and weighing tradeoffs."}},"previous":{"fields":{"slug":"/gastby/"},"frontmatter":{"title":"why i chose gatsby for my blog?"}},"next":{"fields":{"slug":"/react/"},"frontmatter":{"title":"React Hooks"}}},"pageContext":{"id":"f8948249-6d1d-5561-b3dc-b6e64b202fcb","previousPostId":"1031c5a3-a6bb-55e4-a986-d17e654924f0","nextPostId":"b5b853cb-e3fe-5b52-9a69-88e90aa5ee8e"}},"staticQueryHashes":["2841359383","3257411868"]}